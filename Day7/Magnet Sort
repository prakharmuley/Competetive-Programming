Problem Link: https://www.codechef.com/LTIME105B/problems/MAGNETSORT
 


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.SortedMap;
import java.util.StringTokenizer;
import java.util.TreeMap;
 
 
 
import java.text.DecimalFormat;
 
 
 
 
public class Main {
 
	public static void main(String[] args) throws Exception {
 
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		solve(in, out);
		out.close();
	}
	public static boolean isSorted(int[] a) {
		int n = a.length, i = 0;
		for (i = 1; i < n; i++) {
			if (a[i-1] > a[i])
				return false;
		}
		if(a[n-2]>a[n-1]) return false;
		
		
		return true;
	}

	public static void solve(InputReader sc, PrintWriter pw) {
		try {
		int t=sc.nextInt();
    	for(int k=1;k<=t;k++)
    	{
    		
    		int n=sc.nextInt();
    		int a[]=new int[n];
    		int aa[]=new int[n];
    		
    		for(int i=0;i<n;i++)
    		{
    			a[i]=sc.nextInt();	
    		}
    		aa=Arrays.copyOf(a, n);
    		
    		Arrays.sort(aa);
    		String s=sc.next();
    		
    		int ans=0;
    		int i=0;
    		if(Arrays.equals(aa, a))
    		{
    			pw.print("0"+"\n");
    			continue;
    		}
    		else if(((!s.contains("N"))||(!s.contains("S")))&&(!isSorted(a)))
    		{
    			pw.print("-1"+"\n");
    			continue;
    		}
    		if(s.charAt(0)!=s.charAt(n-1)) {ans=1; pw.print(ans+"\n"); continue;}
    		
    		
    		int ncnt=0;
    		int scnt=0;
    		while(i<n)
    		{
    			if(s.charAt(i)=='N') ncnt++;
    			else scnt++;
    			
    			if(a[i]==aa[i]) i++;
    			else break;
    			
    			
    		}
    		
    		i=n-1;
    		while(i>=0)
    		{
    			if(s.charAt(i)=='N') {ncnt++; }
    			else scnt++;
    			if(a[i]==aa[i]) i--;
    			else break;
    		}
    		if(ncnt>0&&scnt>0) ans=1;
    		else ans=2;
    		
    		pw.print(ans+"\n");
    	}
    	
    		
    			
       }
		catch(Exception e) { return;}

    		
    				
 	  
}
 
 
	
 
	
 
	static class InputReader {
		public BufferedReader reader;
		public StringTokenizer tokenizer;
 
		public InputReader(InputStream stream) {
			reader = new BufferedReader(new InputStreamReader(stream), 32768);
			tokenizer = null;
		}
 
		public String nextLine() {
			return null;
		}
 
		public String next() {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				try {
					tokenizer = new StringTokenizer(reader.readLine());
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			}
			return tokenizer.nextToken();
		}
 
		public int nextInt() {
			return Integer.parseInt(next());
		}
 
		public long nextLong() {
			return Long.parseLong(next());
		}

}
}
