Problem Link: https://codeforces.com/contest/1642/problem/A



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.SortedMap;
import java.util.StringTokenizer;
import java.util.TreeMap;
 
 
 
import java.text.DecimalFormat;
 
 
 
 
public class Main {
 
	public static void main(String[] args) {
 
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		solve(in, out);
		out.close();
	}
 
	static String reverse(String s) {
		return (new StringBuilder(s)).reverse().toString();
	}
 
	static void sieveOfEratosthenes(int n, int factors[], ArrayList<Integer> ar) 
    { 
		Arrays.fill(factors, 0);
        factors[1]=1;
        int p;
        for(p = 2; p*p <=n; p++) 
        { 
            if(factors[p] == 0) 
            { 
                ar.add(p);
                factors[p]=p;
                for(int i = p*p; i <= n; i += p) 
                    factors[i] = p; 
            } 
        } 
        for(;p<=n;p++){
            if(factors[p] == 0) 
            { 
                ar.add(p);
            } 
        }
    }
 
    static int lower_bound(int val, int high,int [] arr) {
        int low = 0;
        int ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] <= val) {
                low = mid + 1;
                ans = mid;
            } else
                high = mid - 1;
        }
        return ans;
    }
 
    static int upper_bound(int val, int high, int [] a) {
        int low = 0;
        int ans = high + 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (a[mid] >= val) {
                high = mid - 1;
                ans = mid;
            } else
                low = mid + 1;
        }
        return ans;
    }
 
	static void sort(int ar[]) {
		int n = ar.length;
		ArrayList<Integer> a = new ArrayList<>();
		for (int i = 0; i < n; i++)
			a.add(ar[i]);
		Collections.sort(a);
		for (int i = 0; i < n; i++)
			ar[i] = a.get(i);
	}
 
	static void sort1(long ar[]) {
		int n = ar.length;
		ArrayList<Long> a = new ArrayList<>();
		for (int i = 0; i < n; i++)
			a.add(ar[i]);
		Collections.sort(a);
		for (int i = 0; i < n; i++)
			ar[i] = a.get(i);
	}
 
	static long ncr(long n, long r, long mod) {
		if (r == 0)
			return 1;
		long val = ncr(n - 1, r - 1, mod);
		val = (n * val) % mod;
		val = (val * modInverse(r, mod)) % mod;
		return val;
	}
 
	public static int convert(String a, String b) {
		int T = 0;
		if (b.charAt(0) == 'P') {
			if (a.charAt(0) == '1' && a.charAt(1) == '2')
				T = 12;
			else
				T = (a.charAt(0) - '0') * 10 + (a.charAt(1) - '0') + 12;
		} else if (b.charAt(0) == 'A') {
			if (a.charAt(0) == '1' && a.charAt(1) == '2')
				T = 0;
			else
				T = (a.charAt(0) - '0') * 10 + (a.charAt(1) - '0');
		}
 
		T = T * 100 + (a.charAt(3) - '0') * 10 + (a.charAt(4) - '0');
		return T;
 
	}
 
	static boolean areBracketsBalanced(String expr) {
		// Using ArrayDeque is faster than using Stack class
		Deque<Character> stack = new ArrayDeque<Character>();
 
		// Traversing the Expression
		for (int i = 0; i < expr.length(); i++) {
			char x = expr.charAt(i);
 
			if (x == '(' || x == '[' || x == '{') {
				// Push the element in the stack
				stack.push(x);
				continue;
			}
 
			// IF current current character is not opening
			// bracket, then it must be closing. So stack
			// cannot be empty at this point.
			if (stack.isEmpty())
				return false;
			char check;
			switch (x) {
			case ')':
				check = stack.pop();
				if (check == '{' || check == '[')
					return false;
				break;
 
			case '}':
				check = stack.pop();
				if (check == '(' || check == '[')
					return false;
				break;
 
			case ']':
				check = stack.pop();
				if (check == '(' || check == '{')
					return false;
				break;
			}
		}
 
		// Check Empty Stack
		return (stack.isEmpty());
	}
 
	public static int hr(String s) {
		int hh = 0;
		hh = (s.charAt(0) - '0') * 10 + (s.charAt(1) - '0');
		return hh;
	}
 
	public static int mn(String s) {
		int mm = 0;
		mm = (s.charAt(3) - '0') * 10 + (s.charAt(4) - '0');
		return mm;
	}
 
	/*
	 * public static void countNumberOfPrimeFactors(){ boolean flag[]=new
	 * boolean[N]; Arrays.fill(flag,true); for(int i=2;i<N;i++){ if(flag[i]){
	 * for(int j=i;j<N;j+=i) { prime[j]++; flag[j]=false; } } } // prime[1]=1; }
	 */
 
	public static String rev(String s) {
		char[] temp = s.toCharArray();
		for (int i = 0; i < s.length() / 2; i++) {
			char tmp = temp[i];
			temp[i] = temp[s.length() - 1 - i];
			temp[s.length() - 1 - i] = tmp;
 
		}
		String str = "";
		for (char ch : temp) {
			str += ch;
		}
		return str;
	}
 
	static boolean isP(String str) {
 
		// Pointers pointing to the beginning
		// and the end of the string
		int i = 0, j = str.length() - 1;
 
		// While there are characters to compare
		while (i < j) {
 
			// If there is a mismatch
			if (str.charAt(i) != str.charAt(j))
				return false;
 
			// Increment first pointer and
			// decrement the other
			i++;
			j--;
		}
 
		// Given string is a palindrome
		return true;
	}
 
	public static boolean isSorted(List<Integer> l) {
		int n = l.size(), i = 0;
		for (i = 1; i < l.size(); i++) {
			if (l.get(i - 1) < l.get(i))
				return false;
		}
		return true;
	}
 
	public static boolean ln(long n, int c) {
		int l = 0;
		long t = n;
		while (t != 0) {
 
			t /= 10;
			l++;
		}
		return l == c;
	}
	
   static int lower_bound(int val, int high,ArrayList<Integer> a) {
       int low = 0;
       int ans = -1;
       while (low <= high) {
           int mid = (low + high) / 2;
           if (a.get(mid) <= val) {
               low = mid + 1;
               ans = mid;
           } else
               high = mid - 1;
       }
       return ans;
   }
 
   static int upper_bound(int val, int high, ArrayList<Integer> a) {
       int low = 0;
       int ans = high + 1;
       while (low <= high) {
           int mid = (low + high) / 2;
           if (a.get(mid) >= val) {
               high = mid - 1;
               ans = mid;
           } else
               low = mid + 1;
       }
       return ans;
   }
 public static int fun(int n)
 {
	 if(n==1) return 1;
	 return n*fun(n-1);
	
 }
 
 static class Pair  {
		char x;
		int y;
 
		Pair(char x, int y) {
			this.x = x;
			this.y = y;
		}
 
		
	} 
 

 static int josephus(int n, int k)
 {
     if (n == 1)
         return 1;
     else
        
         return (josephus(n - 1, k) + k ) % n +1;
 }
 
 static int onesComplement(int n)
 {
       
     // Find number of bits in the 
     // given integer
     int number_of_bits = 
            (int)(Math.floor(Math.log(n) /
                          Math.log(2))) + 1;

     // XOR the given integer with poe(2,
     // number_of_bits-1 and print the result
     return ((1 << number_of_bits) - 1) ^ n;
 }
 static int msb(int N)
 {
	 N = N | (N >> 1);
			 N = N | (N >> 2);
			 N = N | (N >> 4);
			 N =N | (N >> 8);
			 N = N | (N >> 16);
			 N = N + 1;
			 
			 return N+1;
			 
 }
 
	public static void solve(InputReader sc, PrintWriter pw) {
		int t=sc.nextInt();
    	for(int k=1;k<=t;k++)
    	{
    		
    		int a[][]=new int[3][2];
    		for(int i=0;i<3;i++)
    		{
    			for(int j=0;j<2;j++) a[i][j]=sc.nextInt();
    		}
//    		for(int i=0;i<3;i++)
//    		{
//    			for(int j=0;j<2;j++) pw.print(a[i][j]+" ");
//    			
//    			pw.print("\n");
//    		}
    		
    		double mnd=(double)Double.MAX_VALUE;
    		double ans1=(double)Double.MAX_VALUE;
			double ans2=(double)Double.MAX_VALUE;
			double ans3=(double)Double.MAX_VALUE;
    		
    				
    					
    					if(a[0][1]==a[1][1]&&a[0][1]!=0&&a[2][1]<a[0][1])
    					{
    						ans1=(double)(Math.abs(a[1][1]-a[0][1])+Math.abs(a[1][0]-a[0][0]));
    						pw.print(ans1);
    					}
    					else if(a[1][1]==a[2][1]&&a[1][1]!=0&&a[0][1]<a[2][1])
    					{
    						ans2=(double)(Math.abs(a[2][1]-a[1][1])+Math.abs(a[2][0]-a[1][0]))*(double)1.000;
    						pw.print(ans2);
    					}
    					else if(a[2][1]==a[0][1]&&a[2][1]!=0&&a[1][1]<a[2][1]) {
    					 ans3=(double)(Math.abs(a[2][1]-a[0][1])+Math.abs(a[2][0]-a[0][0]));
    					 pw.print(ans3);
    					}
    					else 
    						pw.print(0.00000);
    					
    					pw.print("\n");
    				
    		
    		
    		
    	
    			
    			
    		
    		
//    		def dis(a,b):
//    		    di = (b[1]-a[1])2+(b[0]-a[0])2
//    		    return di**(1/2)
//    		for tc in range(int(input())):
//    		    a1 = list(map(int, input().split()))
//    		    a2 = list(map(int, input().split()))
//    		    a3 = list(map(int, input().split()))
//    		    if(a1[1]==a2[1] and a1[1]!=0 and a3[1]<a1[1]):
//    		        print(dis(a1,a2))
//    		    elif(a2[1]==a3[1] and a2[1]!=0 and a1[1]<a3[1]):
//    		        print(dis(a2,a3))
//    		    elif(a3[1]==a1[1] and a3[1]!=0 and a2[1]<a3[1]):
//    		        print(dis(a3,a1))
//    		    else:
//    		        print(0)
    		
    		
       }

    		
    		
    		
    		
    		pw.print("\n");
    				
    		
    	
    	
		
	  
}
 
 
	
 
//	static class Pair1 {
//		int a;
//		int b;
//
//		Pair1(int a, int b) {
//			this.a = a;
//			this.b = b;
//		}
//	}
 
	static boolean isPrime(long n) {
		if (n <= 1)
			return false;
		if (n <= 3)
			return true;
		if (n % 2 == 0 || n % 3 == 0)
			return false;
		for (int i = 5; i * i <= n; i = i + 6)
			if (n % i == 0 || n % (i + 2) == 0)
				return false;
		return true;
	}
 
	static long gcd(long a, long b) {
		if (b == 0)
			return a;
		return gcd(b, a % b);
	}
 
	static int _gcd(int a, int b) {
		if (b == 0)
			return a;
		return _gcd(b, a % b);
	}
 
	static long fast_pow(long base, long n, long M) {
		if (n == 0)
			return 1;
		if (n == 1)
			return base % M;
		long halfn = fast_pow(base, n / 2, M);
		if (n % 2 == 0)
			return (halfn * halfn) % M;
		else
			return (((halfn * halfn) % M) * base) % M;
	}
 
	static long modInverse(long n, long M) {
		return fast_pow(n, M - 2, M);
	}
 
	public static int LowerBound(int a[], int x) {
		int l = -1, r = a.length;
		while (l + 1 < r) {
			int m = (l + r) >>> 1;
			if (a[m] >= x)
				r = m;
			else
				l = m;
		}
		return r;
	}
 
	public static int UpperBound(int a[], int x) {
		int l = -1, r = a.length;
		while (l + 1 < r) {
			int m = (l + r) >>> 1;
			if (a[m] <= x)
				l = m;
			else
				r = m;
		}
		return l + 1;
	}
	
 
	static class InputReader {
		public BufferedReader reader;
		public StringTokenizer tokenizer;
 
		public InputReader(InputStream stream) {
			reader = new BufferedReader(new InputStreamReader(stream), 32768);
			tokenizer = null;
		}
 
		public String nextLine() {
			return null;
		}
 
		public String next() {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				try {
					tokenizer = new StringTokenizer(reader.readLine());
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			}
			return tokenizer.nextToken();
		}
 
		public int nextInt() {
			return Integer.parseInt(next());
		}
 
		public long nextLong() {
			return Long.parseLong(next());
		}

}
}
