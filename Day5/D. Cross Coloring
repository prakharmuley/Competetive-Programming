Problem Link: https://codeforces.com/contest/1644/problem/D



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.SortedMap;
import java.util.StringTokenizer;
import java.util.TreeMap;
 
 
 
import java.text.DecimalFormat;
 
 
 
 
public class Main {
 
	public static void main(String[] args) {
 
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		solve(in, out);
		out.close();
	}
 
	static int _gcd(int a, int b) {
		if (b == 0)
			return a;
		return _gcd(b, a % b);
	}
	static long fast_pow(long base, long n, long M) {
		if (n == 0)
			return 1;
		if (n == 1)
			return base % M;
		long halfn = fast_pow(base, n / 2, M);
		if (n % 2 == 0)
			return (halfn * halfn) % M;
		else
			return (((halfn * halfn) % M) * base) % M;
	}
	public static void solve(InputReader sc, PrintWriter pw) {
		int t=sc.nextInt();
    	for(int k=1;k<=t;k++)
    	{
    		
    		int n=sc.nextInt();
    		int m=sc.nextInt();
    		int kk=sc.nextInt();
    		int q=sc.nextInt();
    		int a[][]=new int[q][2];
    		for(int i=0;i<q;i++) { a[i][0]=sc.nextInt(); a[i][1]=sc.nextInt();}
    		Set<Integer> row=new HashSet<>();
    		Set<Integer> col=new HashSet<>();
    		int count=0;
    		for(int i=q-1;i>=0;i--)
    		{
    			int x=a[i][0];
                int y= a[i][1];
                if ((!row.contains(x) || !col.contains(y)) && row.size() != n && col.size() != m) {
                    count++;
                }
                row.add(x);
                col.add(y);
    		}
    		long mod=998244353;
    		long ans=fast_pow(kk, count,mod);
    		pw.print(ans+"\n");
    		
    			
       }

    		
    		pw.print("\n");
    				
    		
    	
    	
		
	  
}
 
 
	
 
	
 
	static class InputReader {
		public BufferedReader reader;
		public StringTokenizer tokenizer;
 
		public InputReader(InputStream stream) {
			reader = new BufferedReader(new InputStreamReader(stream), 32768);
			tokenizer = null;
		}
 
		public String nextLine() {
			return null;
		}
		public String next() {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				try {
					tokenizer = new StringTokenizer(reader.readLine());
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			}
			return tokenizer.nextToken();
		}
		public int nextInt() {
			return Integer.parseInt(next());
		} 
		public long nextLong() {
			return Long.parseLong(next());
		}
}
}
